#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Repository & Release Manager - Simple GUI Tool
"""

import os
import sys
import subprocess
import json
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from datetime import datetime
import threading
import webbrowser

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á requests
try:
    import requests
except ImportError:
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á requests...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "requests"])
    import requests

class RepoManagerGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Repository & Release Manager")
        self.root.geometry("900x700")
        self.root.configure(bg='#f0f0f0')
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
        self.project_path = tk.StringVar(value=os.getcwd())
        self.github_token = tk.StringVar(value=os.getenv('GITHUB_TOKEN', ''))
        self.repo_owner = tk.StringVar()
        self.repo_name = tk.StringVar()
        
        self.setup_ui()
        self.load_repo_info()
        
    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI"""
        # Title
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=60)
        title_frame.pack(fill='x')
        title_frame.pack_propagate(False)
        
        tk.Label(title_frame, text="üöÄ Repository & Release Manager", 
                font=('Arial', 16, 'bold'), fg='white', bg='#2c3e50').pack(pady=15)
        
        # Main frame
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=15, pady=15)
        
        # Settings
        settings_frame = tk.LabelFrame(main_frame, text="‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", font=('Arial', 11, 'bold'))
        settings_frame.pack(fill='x', pady=(0, 10))
        
        # Project path
        tk.Label(settings_frame, text="‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ:").grid(row=0, column=0, sticky='w', padx=10, pady=8)
        path_frame = tk.Frame(settings_frame)
        path_frame.grid(row=0, column=1, sticky='ew', padx=10, pady=8)
        settings_frame.columnconfigure(1, weight=1)
        
        self.path_entry = tk.Entry(path_frame, textvariable=self.project_path, width=60)
        self.path_entry.pack(side='left', fill='x', expand=True)
        tk.Button(path_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", command=self.browse_folder).pack(side='right', padx=(5,0))
        
        # GitHub token
        tk.Label(settings_frame, text="GitHub Token:").grid(row=1, column=0, sticky='w', padx=10, pady=8)
        token_frame = tk.Frame(settings_frame)
        token_frame.grid(row=1, column=1, sticky='ew', padx=10, pady=8)
        
        self.token_entry = tk.Entry(token_frame, textvariable=self.github_token, show='*', width=50)
        self.token_entry.pack(side='left', fill='x', expand=True)
        tk.Button(token_frame, text="‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", command=self.show_token_help).pack(side='right', padx=(5,0))
        
        # Repository info
        tk.Label(settings_frame, text="Owner:").grid(row=2, column=0, sticky='w', padx=10, pady=8)
        tk.Entry(settings_frame, textvariable=self.repo_owner, width=30).grid(row=2, column=1, sticky='w', padx=10, pady=8)
        
        tk.Label(settings_frame, text="Repository:").grid(row=3, column=0, sticky='w', padx=10, pady=8)
        tk.Entry(settings_frame, textvariable=self.repo_name, width=30).grid(row=3, column=1, sticky='w', padx=10, pady=8)
        
        # Buttons
        btn_frame = tk.Frame(main_frame)
        btn_frame.pack(fill='x', pady=10)
        
        tk.Button(btn_frame, text="üì§ Push ‡πÑ‡∏ü‡∏•‡πå", command=self.push_files, 
                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold'), 
                 width=12, height=2).pack(side='left', padx=5)
        
        tk.Button(btn_frame, text="üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á Release", command=self.create_release, 
                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold'), 
                 width=12, height=2).pack(side='left', padx=5)
        
        tk.Button(btn_frame, text="üöÄ ‡∏ó‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", command=self.do_all, 
                 bg='#9b59b6', fg='white', font=('Arial', 10, 'bold'), 
                 width=12, height=2).pack(side='left', padx=5)
        
        tk.Button(btn_frame, text="üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä", command=self.refresh_info, 
                 bg='#34495e', fg='white', font=('Arial', 10, 'bold'), 
                 width=12, height=2).pack(side='left', padx=5)
        
        tk.Button(btn_frame, text="üìã ‡∏î‡∏π Releases", command=self.view_releases, 
                 bg='#16a085', fg='white', font=('Arial', 10, 'bold'), 
                 width=12, height=2).pack(side='left', padx=5)
        
        tk.Button(btn_frame, text="üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", command=self.check_setup, 
                 bg='#f39c12', fg='white', font=('Arial', 10, 'bold'), 
                 width=12, height=2).pack(side='left', padx=5)
        
        # Second row of buttons
        btn_frame2 = tk.Frame(main_frame)
        btn_frame2.pack(fill='x', pady=5)
        
        tk.Button(btn_frame2, text="üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Remote", command=self.fix_remote_manual, 
                 bg='#e67e22', fg='white', font=('Arial', 10, 'bold'), 
                 width=12, height=1).pack(side='left', padx=5)
        
        # Log
        log_frame = tk.LabelFrame(main_frame, text="Log", font=('Arial', 11, 'bold'))
        log_frame.pack(fill='both', expand=True, pady=(10, 0))
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, 
                                                 bg='#2c3e50', fg='#ecf0f1', 
                                                 font=('Consolas', 9))
        self.log_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Status
        self.status_var = tk.StringVar(value="‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        status_bar = tk.Label(self.root, textvariable=self.status_var, 
                            relief='sunken', anchor='w')
        status_bar.pack(side='bottom', fill='x')
        
    def log(self, message):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert('end', f"[{timestamp}] {message}\n")
        self.log_text.see('end')
        self.root.update()
        
    def run_command(self, command, cwd=None, check_error=True):
        """‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        if cwd is None:
            cwd = self.project_path.get()
            
        self.log(f"‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {command}")
        
        try:
            result = subprocess.run(command, shell=True, cwd=cwd, 
                                  capture_output=True, text=True, 
                                  check=check_error, encoding='utf-8')
            if result.stdout.strip():
                self.log(f"‚úÖ {result.stdout.strip()}")
            if result.stderr.strip() and not check_error:
                self.log(f"‚ö†Ô∏è {result.stderr.strip()}")
            return result
        except subprocess.CalledProcessError as e:
            self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            if e.stderr:
                self.log(f"‚ùå {e.stderr.strip()}")
            return None
        except Exception as e:
            self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return None
            
    def browse_folder(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        folder = filedialog.askdirectory(initialdir=self.project_path.get())
        if folder:
            self.project_path.set(folder)
            self.load_repo_info()
            
    def load_repo_info(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repository"""
        try:
            project_dir = self.project_path.get()
            if not os.path.exists(project_dir):
                return
                
            os.chdir(project_dir)
            result = subprocess.run('git remote get-url origin', shell=True, 
                                  capture_output=True, text=True)
            
            if result.returncode == 0 and result.stdout:
                url = result.stdout.strip()
                self.log(f"‡∏û‡∏ö remote URL: {url}")
                
                if 'github.com' in url:
                    if url.startswith('https://'):
                        parts = url.replace('https://github.com/', '').replace('.git', '').split('/')
                    elif url.startswith('git@'):
                        parts = url.replace('git@github.com:', '').replace('.git', '').split('/')
                    
                    if len(parts) >= 2:
                        self.repo_owner.set(parts[0])
                        self.repo_name.set(parts[1])
                        self.log(f"üìÅ Repository: {parts[0]}/{parts[1]}")
        except Exception as e:
            self.log(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repo: {e}")
            
    def show_token_help(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á token"""
        help_text = """‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á GitHub Personal Access Token:

1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà GitHub.com ‚Üí Settings ‚Üí Developer settings
2. Personal access tokens ‚Üí Tokens (classic)
3. Generate new token (classic)
4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å scopes: repo, workflow
5. Copy token ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á"""
        
        messagebox.showinfo("‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", help_text)
        webbrowser.open("https://github.com/settings/tokens")
        
    def check_git_config(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git config"""
        try:
            name_result = self.run_command('git config user.name', check_error=False)
            email_result = self.run_command('git config user.email', check_error=False)
            
            if not name_result or not name_result.stdout.strip():
                self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö git user.name")
                name = messagebox.askstring("Git Config", "‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Git:")
                if name:
                    self.run_command(f'git config user.name "{name}"')
                    
            if not email_result or not email_result.stdout.strip():
                self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö git user.email")
                email = messagebox.askstring("Git Config", "‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏• Git:")
                if email:
                    self.run_command(f'git config user.email "{email}"')
                    
        except Exception as e:
            self.log(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git config: {e}")

    def check_repository_exists(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ repository ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á"""
        if not self.github_token.get() or not self.repo_owner.get() or not self.repo_name.get():
            return False
            
        try:
            url = f"https://api.github.com/repos/{self.repo_owner.get()}/{self.repo_name.get()}"
            headers = {'Authorization': f'token {self.github_token.get()}'}
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                self.log("‚úÖ Repository ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                return True
            elif response.status_code == 404:
                self.log("‚ùå Repository ‡πÑ‡∏°‡πà‡∏û‡∏ö")
                create = messagebox.askyesno("Repository ‡πÑ‡∏°‡πà‡∏û‡∏ö", 
                    f"Repository {self.repo_owner.get()}/{self.repo_name.get()} ‡πÑ‡∏°‡πà‡∏û‡∏ö\n"
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á repository ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
                if create:
                    return self.create_repository()
                return False
            else:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö repo: {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False

    def create_repository(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á repository ‡πÉ‡∏´‡∏°‡πà"""
        try:
            self.log("üî® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á repository...")
            
            url = "https://api.github.com/user/repos"
            headers = {
                'Authorization': f'token {self.github_token.get()}',
                'Accept': 'application/vnd.github.v3+json'
            }
            
            data = {
                'name': self.repo_name.get(),
                'description': f"Repository created by Repo Manager",
                'private': False,
                'auto_init': True  # ‡∏™‡∏£‡πâ‡∏≤‡∏á README.md ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            }
            
            response = requests.post(url, headers=headers, json=data)
            
            if response.status_code == 201:
                self.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á repository ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                
                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                self.log("‚è≥ ‡∏£‡∏≠ repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...")
                import time
                time.sleep(3)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                check_url = f"https://api.github.com/repos/{self.repo_owner.get()}/{self.repo_name.get()}"
                for i in range(5):  # ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    check_response = requests.get(check_url, headers=headers)
                    if check_response.status_code == 200:
                        self.log("‚úÖ Repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
                        return True
                    time.sleep(1)
                
                self.log("‚ö†Ô∏è Repository ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏ï‡πà‡∏•‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
                return True
            else:
                self.log(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á repository ‡πÑ‡∏î‡πâ: {response.status_code}")
                self.log(f"‚ùå {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False

    def fix_remote_url(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL"""
        try:
            # ‡∏•‡∏ö remote ‡πÄ‡∏Å‡πà‡∏≤
            self.run_command('git remote remove origin', check_error=False)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° remote ‡πÉ‡∏´‡∏°‡πà
            repo_url = f"https://github.com/{self.repo_owner.get()}/{self.repo_name.get()}.git"
            self.run_command(f'git remote add origin {repo_url}')
            self.log(f"üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ remote URL ‡πÉ‡∏´‡∏°‡πà: {repo_url}")
            
        except Exception as e:
            self.log(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote: {e}")

    def push_files(self):
        """Push ‡πÑ‡∏ü‡∏•‡πå"""
        def push_thread():
            try:
                self.status_var.set("‡∏Å‡∏≥‡∏•‡∏±‡∏á push...")
                self.log("üì§ ‡πÄ‡∏£‡∏¥‡πà‡∏° push ‡πÑ‡∏ü‡∏•‡πå")
                
                project_dir = self.project_path.get()
                os.chdir(project_dir)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git config
                self.check_git_config()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö repository
                repo_created = False
                if not self.check_repository_exists():
                    self.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
                    self.status_var.set("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    return
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git repo
                if not os.path.exists('.git'):
                    self.run_command('git init')
                    self.run_command('git branch -M main')
                    repo_created = True
                    
                # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!)
                self.fix_remote_url()
                    
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                self.run_command('git add .')
                status_result = self.run_command('git status --porcelain', check_error=False)
                    
                if status_result and status_result.stdout.strip():
                    # Commit
                    commit_msg = f"Update - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    commit_result = self.run_command(f'git commit -m "{commit_msg}"', check_error=False)
                    
                    if commit_result and commit_result.returncode == 0:
                        self.log("‚úÖ Commit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else:
                        self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ commit ‡πÑ‡∏î‡πâ")
                else:
                    self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö branch ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                branch_result = self.run_command('git branch --show-current', check_error=False)
                current_branch = 'main'
                if branch_result and branch_result.stdout.strip():
                    current_branch = branch_result.stdout.strip()
                
                # Push ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á repo
                if repo_created:
                    self.log("‚è≥ ‡∏£‡∏≠ repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...")
                    import time
                    time.sleep(2)
                
                self.log(f"üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch: {current_branch}")
                push_result = self.run_command(f'git push -u origin {current_branch}', check_error=False)
                
                if push_result and push_result.returncode == 0:
                    self.log("‚úÖ Push ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                    self.status_var.set("Push ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                else:
                    # ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ force push
                    self.log("‚ö†Ô∏è ‡∏•‡∏≠‡∏á force push...")
                    force_result = self.run_command(f'git push -f origin {current_branch}', check_error=False)
                    if force_result and force_result.returncode == 0:
                        self.log("‚úÖ Force push ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                        self.status_var.set("Push ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                    else:
                        self.log("‚ùå Push ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                        self.status_var.set("Push ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                
            except Exception as e:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                self.status_var.set("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
                
        threading.Thread(target=push_thread, daemon=True).start()
        
    def create_release(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á release"""
        if not self.github_token.get():
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà GitHub Token")
            return
            
        if not self.repo_owner.get() or not self.repo_name.get():
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Owner ‡πÅ‡∏•‡∏∞ Repository")
            return
            
        self.show_release_dialog()
        
    def show_release_dialog(self):
        """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á release"""
        dialog = tk.Toplevel(self.root)
        dialog.title("‡∏™‡∏£‡πâ‡∏≤‡∏á Release")
        dialog.geometry("500x400")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Get latest tag
        latest_tag = self.get_latest_tag()
        suggested_version = self.increment_version(latest_tag)
        
        tk.Label(dialog, text="‡∏™‡∏£‡πâ‡∏≤‡∏á GitHub Release", font=('Arial', 14, 'bold')).pack(pady=15)
        tk.Label(dialog, text=f"Tag ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {latest_tag or '‡πÑ‡∏°‡πà‡∏°‡∏µ'}").pack()
        
        # Version
        tk.Label(dialog, text="‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà:").pack(pady=(15,5))
        version_var = tk.StringVar(value=suggested_version)
        tk.Entry(dialog, textvariable=version_var, width=30).pack()
        
        # Name
        tk.Label(dialog, text="‡∏ä‡∏∑‡πà‡∏≠ Release:").pack(pady=(15,5))
        name_var = tk.StringVar(value=suggested_version)
        tk.Entry(dialog, textvariable=name_var, width=30).pack()
        
        # Description
        tk.Label(dialog, text="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:").pack(pady=(15,5))
        desc_text = tk.Text(dialog, width=50, height=8)
        desc_text.pack(pady=5)
        
        # Auto changelog
        changelog = self.generate_changelog(latest_tag)
        desc_text.insert('1.0', changelog)
        
        # Buttons
        btn_frame = tk.Frame(dialog)
        btn_frame.pack(pady=20)
        
        def create_action():
            self.do_create_release(version_var.get(), name_var.get(), desc_text.get('1.0', 'end'))
            dialog.destroy()
            
        tk.Button(btn_frame, text="‡∏™‡∏£‡πâ‡∏≤‡∏á Release", command=create_action, 
                 bg='#e74c3c', fg='white').pack(side='left', padx=10)
        tk.Button(btn_frame, text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", command=dialog.destroy, 
                 bg='#95a5a6', fg='white').pack(side='left')
                 
    def get_latest_tag(self):
        """‡∏î‡∏∂‡∏á tag ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        try:
            result = subprocess.run('git tag --sort=-version:refname', shell=True, 
                                  cwd=self.project_path.get(), capture_output=True, text=True)
            if result.returncode == 0 and result.stdout.strip():
                return result.stdout.strip().split('\n')[0]
        except:
            pass
        return None
        
    def increment_version(self, version):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô"""
        if not version:
            return "v1.0.0"
            
        clean_version = version.lstrip('v')
        parts = clean_version.split('.')
        
        try:
            if len(parts) >= 3:
                parts[2] = str(int(parts[2]) + 1)
                return f"v{'.'.join(parts)}"
        except:
            pass
            
        return f"v{clean_version}.1"
        
    def generate_changelog(self, latest_tag):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á changelog"""
        if not latest_tag:
            return "Release notes"
            
        try:
            result = subprocess.run(f'git log {latest_tag}..HEAD --oneline', shell=True, 
                                  cwd=self.project_path.get(), capture_output=True, text=True)
            if result.returncode == 0 and result.stdout.strip():
                changelog = "## ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á\n\n"
                for commit in result.stdout.strip().split('\n'):
                    if commit.strip():
                        changelog += f"- {commit}\n"
                return changelog
        except:
            pass
            
        return "Release notes"
        
    def do_create_release(self, version, name, description):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡∏à‡∏£‡∏¥‡∏á"""
        def release_thread():
            try:
                self.status_var.set("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á release...")
                self.log(f"üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á release {version}")
                
                url = f"https://api.github.com/repos/{self.repo_owner.get()}/{self.repo_name.get()}/releases"
                headers = {
                    'Authorization': f'token {self.github_token.get()}',
                    'Accept': 'application/vnd.github.v3+json'
                }
                
                data = {
                    'tag_name': version,
                    'name': name,
                    'body': description.strip(),
                    'draft': False,
                    'prerelease': False
                }
                
                response = requests.post(url, headers=headers, json=data)
                
                if response.status_code == 201:
                    release_data = response.json()
                    self.log(f"üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á release {version} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    self.log(f"üîó URL: {release_data['html_url']}")
                    self.status_var.set("‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏™‡∏£‡πâ‡∏≤‡∏á release {version} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                else:
                    self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.status_code}")
                    self.log(f"‚ùå {response.text}")
                    messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡πÑ‡∏î‡πâ")
                    
            except Exception as e:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
            self.status_var.set("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            
        threading.Thread(target=release_thread, daemon=True).start()
        
    def do_all(self):
        """‡∏ó‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        def all_thread():
            try:
                self.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                if not self.repo_owner.get() or not self.repo_name.get():
                    self.log("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Owner ‡πÅ‡∏•‡∏∞ Repository")
                    messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Owner ‡πÅ‡∏•‡∏∞ Repository")
                    return
                
                project_dir = self.project_path.get()
                os.chdir(project_dir)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git config
                self.check_git_config()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö repository
                if not self.check_repository_exists():
                    self.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
                    self.status_var.set("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    return
                
                # Push first
                self.status_var.set("‡∏Å‡∏≥‡∏•‡∏±‡∏á push...")
                
                if not os.path.exists('.git'):
                    self.run_command('git init')
                    self.run_command('git branch -M main')
                    
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                self.run_command('git add .')
                status_result = self.run_command('git status --porcelain', check_error=False)
                
                if status_result and status_result.stdout.strip():
                    commit_msg = f"Release prep - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    commit_result = self.run_command(f'git commit -m "{commit_msg}"', check_error=False)
                else:
                    self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà")
                
                # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL
                self.fix_remote_url()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö branch
                branch_result = self.run_command('git branch --show-current', check_error=False)
                current_branch = 'main'
                if branch_result and branch_result.stdout.strip():
                    current_branch = branch_result.stdout.strip()
                
                # Push
                push_result = self.run_command(f'git push -u origin {current_branch}', check_error=False)
                
                if push_result and push_result.returncode == 0:
                    self.log("‚úÖ Push ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                    
                    # Create release
                    if self.github_token.get():
                        self.log("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á release...")
                        latest_tag = self.get_latest_tag()
                        new_version = self.increment_version(latest_tag)
                        changelog = self.generate_changelog(latest_tag)
                        
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡πÉ‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                        self.create_release_sync(new_version, new_version, changelog)
                    else:
                        self.log("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° release ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ token")
                        
                    self.log("üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!")
                    self.status_var.set("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                else:
                    self.log("‚ùå Push ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    self.status_var.set("Push ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                
            except Exception as e:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                self.status_var.set("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
                
        threading.Thread(target=all_thread, daemon=True).start()

    def create_release_sync(self, version, name, description):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡πÅ‡∏ö‡∏ö sync"""
        try:
            self.status_var.set("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á release...")
            self.log(f"üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á release {version}")
            
            url = f"https://api.github.com/repos/{self.repo_owner.get()}/{self.repo_name.get()}/releases"
            headers = {
                'Authorization': f'token {self.github_token.get()}',
                'Accept': 'application/vnd.github.v3+json'
            }
            
            data = {
                'tag_name': version,
                'name': name,
                'body': description.strip(),
                'draft': False,
                'prerelease': False
            }
            
            response = requests.post(url, headers=headers, json=data)
            
            if response.status_code == 201:
                release_data = response.json()
                self.log(f"üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á release {version} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                self.log(f"üîó URL: {release_data['html_url']}")
                return True
            else:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.status_code}")
                self.log(f"‚ùå {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False
        
    def refresh_info(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä"""
        self.load_repo_info()
        self.log("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
    def view_releases(self):
        """‡∏î‡∏π releases"""
        if self.repo_owner.get() and self.repo_name.get():
            url = f"https://github.com/{self.repo_owner.get()}/{self.repo_name.get()}/releases"
            webbrowser.open(url)
            self.log(f"üåê ‡πÄ‡∏õ‡∏¥‡∏î: {url}")
        else:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Owner ‡πÅ‡∏•‡∏∞ Repository")

    def check_setup(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        def check_thread():
            self.log("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤...")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
            if not os.path.exists(self.project_path.get()):
                self.log("‚ùå ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏°‡πà‡∏û‡∏ö")
                return
            else:
                self.log("‚úÖ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Git
            git_result = self.run_command('git --version', check_error=False)
            if git_result and git_result.returncode == 0:
                self.log("‚úÖ Git ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            else:
                self.log("‚ùå Git ‡πÑ‡∏°‡πà‡∏û‡∏ö")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Git config
            self.check_git_config()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GitHub Token
            if not self.github_token.get():
                self.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö GitHub Token")
            else:
                self.log("‚úÖ GitHub Token ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Token
                try:
                    headers = {'Authorization': f'token {self.github_token.get()}'}
                    response = requests.get('https://api.github.com/user', headers=headers)
                    if response.status_code == 200:
                        user_data = response.json()
                        self.log(f"‚úÖ Token ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user_data.get('login', 'Unknown')}")
                    else:
                        self.log(f"‚ùå Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {response.status_code}")
                except Exception as e:
                    self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö token: {e}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Repository
            if self.repo_owner.get() and self.repo_name.get():
                self.log(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö repository: {self.repo_owner.get()}/{self.repo_name.get()}")
                if self.check_repository_exists():
                    self.log("‚úÖ Repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                else:
                    self.log("‚ùå Repository ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            else:
                self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ Owner ‡∏´‡∏£‡∏∑‡∏≠ Repository")
            
            self.log("üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
        threading.Thread(target=check_thread, daemon=True).start()

    def fix_remote_manual(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL ‡πÅ‡∏ö‡∏ö manual"""
        def fix_thread():
            try:
                project_dir = self.project_path.get()
                os.chdir(project_dir)
                
                if not os.path.exists('.git'):
                    self.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Git repository")
                    return
                
                if not self.repo_owner.get() or not self.repo_name.get():
                    self.log("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Owner ‡πÅ‡∏•‡∏∞ Repository")
                    return
                
                self.log("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL...")
                self.fix_remote_url()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö remote ‡πÉ‡∏´‡∏°‡πà
                result = self.run_command('git remote -v', check_error=False)
                if result:
                    self.log("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                
            except Exception as e:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
        threading.Thread(target=fix_thread, daemon=True).start()
            
    def run(self):
        """‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        self.log("üöÄ Repository & Release Manager ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.log("üí° ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà GitHub Token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.root.mainloop()

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        app = RepoManagerGUI()
        app.run()
    except KeyboardInterrupt:
        print("\n‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    except Exception as e:
        print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å...")

if __name__ == "__main__":
    main()