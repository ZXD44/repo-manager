#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Repository & Release Manager - Simple GUI Tool
"""

import os
import sys
import subprocess
import json
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from datetime import datetime
import threading
import webbrowser
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á requests
try:
    import requests
except ImportError:
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á requests...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "requests"])
    import requests

class RepoManagerGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Repository & Release Manager")
        self.root.geometry("1000x750")
        self.root.configure(bg='#f0f0f0')
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
        self.project_path = tk.StringVar(value=os.getcwd())
        
        # Load GitHub credentials from environment variables
        self.github_token = tk.StringVar(value=os.getenv('GITHUB_TOKEN', ''))
        self.github_username = tk.StringVar(value=os.getenv('GITHUB_USERNAME', ''))
        
        # Initialize repository variables
        self.repo_owner = tk.StringVar()
        self.repo_name = tk.StringVar()
        
        self.setup_ui()
        self.load_repo_info()
        
    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏ò‡∏µ‡∏° GitHub"""
        # GitHub Colors
        self.colors = {
            'bg': '#0d1117',           # GitHub dark background
            'surface': '#161b22',      # GitHub surface
            'border': '#30363d',       # GitHub border
            'text': '#f0f6fc',         # GitHub text
            'text_muted': '#8b949e',   # GitHub muted text
            'primary': '#238636',      # GitHub green
            'danger': '#da3633',       # GitHub red
            'warning': '#d29922',      # GitHub yellow
            'info': '#1f6feb',         # GitHub blue
            'secondary': '#6e7681',    # GitHub gray
        }
        
        # Configure root
        self.root.configure(bg=self.colors['bg'])
        
        # Header
        header_frame = tk.Frame(self.root, bg=self.colors['surface'], height=70)
        header_frame.pack(fill='x', padx=2, pady=2)
        header_frame.pack_propagate(False)
        
        # GitHub-style header
        header_content = tk.Frame(header_frame, bg=self.colors['surface'])
        header_content.pack(expand=True, fill='both', padx=20, pady=15)
        
        tk.Label(header_content, text="üêô ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ GitHub Repository", 
                font=('Segoe UI', 18, 'bold'), fg=self.colors['text'], 
                bg=self.colors['surface']).pack(side='left')
        
        # Status indicator
        self.status_var = tk.StringVar(value="‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        status_label = tk.Label(header_content, textvariable=self.status_var,
                               font=('Segoe UI', 10), fg=self.colors['text_muted'],
                               bg=self.colors['surface'])
        status_label.pack(side='right')
        
        # Main container
        main_container = tk.Frame(self.root, bg=self.colors['bg'])
        main_container.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Settings Panel
        settings_panel = tk.Frame(main_container, bg=self.colors['surface'], 
                                 relief='solid', bd=1)
        settings_panel.pack(fill='x', pady=(0, 10))
        
        # Settings header
        settings_header = tk.Frame(settings_panel, bg=self.colors['surface'])
        settings_header.pack(fill='x', padx=15, pady=(15, 10))
        
        tk.Label(settings_header, text="‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", 
                font=('Segoe UI', 12, 'bold'), fg=self.colors['text'],
                bg=self.colors['surface']).pack(side='left')
        
        # Settings content
        settings_content = tk.Frame(settings_panel, bg=self.colors['surface'])
        settings_content.pack(fill='x', padx=15, pady=(0, 15))
        
        # Project path
        self.create_input_field(settings_content, "üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ:", 
                               self.project_path, 0, browse=True)
        
        # GitHub token
        self.create_input_field(settings_content, "üîë GitHub Token:", 
                               self.github_token, 1, password=True, help=True)
        
        # Repository info - Hidden as we'll use GITHUB_USERNAME
        self.repo_owner.set(self.github_username.get())  # Auto-set repo owner to GITHUB_USERNAME
        # Repository name input only
        tk.Label(settings_content, text="üì¶ ‡∏ä‡∏∑‡πà‡∏≠ repository:", 
                font=('Segoe UI', 10), fg=self.colors['text'], 
                bg=self.colors['surface']).grid(row=5, column=0, sticky='w', pady=5, padx=5)
        
        repo_entry = tk.Entry(settings_content, textvariable=self.repo_name, 
                            font=('Segoe UI', 10), bg=self.colors['bg'], 
                            fg=self.colors['text'], insertbackground=self.colors['text'],
                            relief='solid', bd=1)
        repo_entry.grid(row=5, column=1, sticky='ew', pady=5, padx=5)
        repo_entry.bind('<Return>', lambda e: self.load_repo_info())
        
        # Add a note about the repository owner
        tk.Label(settings_content, text=f"Repository owner: {self.github_username.get()}", 
                font=('Segoe UI', 9), fg=self.colors['text_muted'], 
                bg=self.colors['surface']).grid(row=6, column=0, columnspan=2, sticky='w', padx=5)
        
        # Action Buttons Panel
        actions_panel = tk.Frame(main_container, bg=self.colors['surface'], 
                                relief='solid', bd=1)
        actions_panel.pack(fill='x', pady=(0, 10))
        
        # Actions header
        actions_header = tk.Frame(actions_panel, bg=self.colors['surface'])
        actions_header.pack(fill='x', padx=15, pady=(15, 10))
        
        tk.Label(actions_header, text="üöÄ ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", 
                font=('Segoe UI', 12, 'bold'), fg=self.colors['text'],
                bg=self.colors['surface']).pack(side='left')
        
        # Main action buttons - simplified to 3 main buttons
        main_actions = tk.Frame(actions_panel, bg=self.colors['surface'])
        main_actions.pack(fill='x', padx=15, pady=(0, 15))
        
        # Primary actions (3 main buttons only)
        primary_frame = tk.Frame(main_actions, bg=self.colors['surface'])
        primary_frame.pack(fill='x', pady=(0, 15))
        
        self.create_action_button(primary_frame, "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå", 
                                 self.push_files, self.colors['primary'], 0, 0, large=True)
        
        self.create_action_button(primary_frame, "üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á Release", 
                                 self.create_release, self.colors['warning'], 0, 1, large=True)
        
        self.create_action_button(primary_frame, "üöÄ ‡∏ó‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", 
                                 self.do_all, self.colors['info'], 0, 2, large=True)
        
        # Configure grid weights for 3 buttons
        for i in range(3):
            primary_frame.columnconfigure(i, weight=1)
        
        # Secondary actions - simplified
        secondary_frame = tk.Frame(main_actions, bg=self.colors['surface'])
        secondary_frame.pack(fill='x')
        
        # Left side - simple buttons
        left_frame = tk.Frame(secondary_frame, bg=self.colors['surface'])
        left_frame.pack(side='left')
        
        tk.Button(left_frame, text="üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", command=self.check_setup,
                 font=('Segoe UI', 9), bg=self.colors['secondary'], fg='white',
                 relief='flat', cursor='hand2', width=10).pack(side='left', padx=(0, 5))
        
        tk.Button(left_frame, text="üìã ‡∏î‡∏π Releases", command=self.view_releases,
                 font=('Segoe UI', 9), bg=self.colors['secondary'], fg='white',
                 relief='flat', cursor='hand2', width=12).pack(side='left', padx=5)
        
        # Right side - exit button
        right_frame = tk.Frame(secondary_frame, bg=self.colors['surface'])
        right_frame.pack(side='right')
        
        tk.Button(right_frame, text="‚ùå ‡∏≠‡∏≠‡∏Å", command=self.root.quit,
                 font=('Segoe UI', 9), bg=self.colors['danger'], fg='white',
                 relief='flat', cursor='hand2', width=8).pack()
        
        # Log Panel
        log_panel = tk.Frame(main_container, bg=self.colors['surface'], 
                            relief='solid', bd=1)
        log_panel.pack(fill='both', expand=True)
        
        # Log header
        log_header = tk.Frame(log_panel, bg=self.colors['surface'])
        log_header.pack(fill='x', padx=15, pady=(15, 10))
        
        tk.Label(log_header, text="üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", 
                font=('Segoe UI', 12, 'bold'), fg=self.colors['text'],
                bg=self.colors['surface']).pack(side='left')
        
        # Clear log button
        clear_btn = tk.Button(log_header, text="‡∏•‡πâ‡∏≤‡∏á", font=('Segoe UI', 9),
                             bg=self.colors['secondary'], fg='white', relief='flat',
                             command=self.clear_log, cursor='hand2')
        clear_btn.pack(side='right')
        
        # Log content
        log_content = tk.Frame(log_panel, bg=self.colors['surface'])
        log_content.pack(fill='both', expand=True, padx=15, pady=(0, 15))
        
        self.log_text = scrolledtext.ScrolledText(log_content, height=12, 
                                                 bg=self.colors['bg'], fg=self.colors['text'], 
                                                 font=('Consolas', 10), relief='solid', bd=1,
                                                 insertbackground=self.colors['text'])
        self.log_text.pack(fill='both', expand=True)
        
    def create_input_field(self, parent, label, variable, row, browse=False, password=False, help=False):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        tk.Label(parent, text=label, font=('Segoe UI', 10),
                fg=self.colors['text'], bg=self.colors['surface']).grid(row=row, column=0, sticky='w', pady=5)
        
        field_frame = tk.Frame(parent, bg=self.colors['surface'])
        field_frame.grid(row=row, column=1, sticky='ew', padx=(10, 0), pady=5)
        field_frame.columnconfigure(0, weight=1)
        
        entry = tk.Entry(field_frame, textvariable=variable, font=('Segoe UI', 10),
                        bg=self.colors['bg'], fg=self.colors['text'], 
                        insertbackground=self.colors['text'], relief='solid', bd=1,
                        show='*' if password else '')
        entry.grid(row=0, column=0, sticky='ew', padx=(0, 5))
        
        if browse:
            browse_btn = tk.Button(field_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", font=('Segoe UI', 9),
                                  bg=self.colors['secondary'], fg='white', relief='flat',
                                  command=self.browse_folder, cursor='hand2')
            browse_btn.grid(row=0, column=1)
        
        if help:
            help_btn = tk.Button(field_frame, text="‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", font=('Segoe UI', 9),
                                bg=self.colors['info'], fg='white', relief='flat',
                                command=self.show_token_help, cursor='hand2')
            help_btn.grid(row=0, column=2 if browse else 1, padx=(5, 0))
    
    def create_action_button(self, parent, text, command, color, row, col, large=False):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å"""
        height = 3 if large else 2
        width = 18 if large else 15
        
        btn = tk.Button(parent, text=text, command=command, 
                       font=('Segoe UI', 10, 'bold'), bg=color, fg='white',
                       relief='flat', height=height, width=width, cursor='hand2')
        btn.grid(row=row, column=col, padx=5, pady=5, sticky='ew')
        
        # Hover effects
        def on_enter(e):
            btn.configure(bg=self.darken_color(color))
        def on_leave(e):
            btn.configure(bg=color)
        
        btn.bind("<Enter>", on_enter)
        btn.bind("<Leave>", on_leave)
    
    def create_small_button(self, parent, text, command, color, tooltip):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å"""
        btn = tk.Button(parent, text=text, command=command, 
                       font=('Segoe UI', 10), bg=color, fg='white',
                       relief='flat', width=3, height=1, cursor='hand2')
        btn.pack(side='left', padx=2)
        
        # Tooltip
        self.create_tooltip(btn, tooltip)
    
    def create_tooltip(self, widget, text):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á tooltip"""
        def on_enter(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            label = tk.Label(tooltip, text=text, background=self.colors['surface'],
                           foreground=self.colors['text'], relief='solid', bd=1,
                           font=('Segoe UI', 9))
            label.pack()
            widget.tooltip = tooltip
        
        def on_leave(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
                del widget.tooltip
        
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)
    
    def darken_color(self, color):
        """‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô"""
        color_map = {
            self.colors['primary']: '#1f7a2e',
            self.colors['danger']: '#b92d2b',
            self.colors['warning']: '#b8851c',
            self.colors['info']: '#1a5fb4',
            self.colors['secondary']: '#5a6169',
        }
        return color_map.get(color, color)
    

    def clear_log(self):
        """‡∏•‡πâ‡∏≤‡∏á log"""
        self.log_text.delete(1.0, tk.END)
        self.log("üìù ‡∏•‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß")
    
    def create_repo_only(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á repository ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
        if not self.github_token.get():
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà GitHub Token")
            return
        if not self.repo_owner.get() or not self.repo_name.get():
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡∏∞ Repository")
            return
        
        def create_thread():
            self.status_var.set("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á repository...")
            if self.create_repository():
                self.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Repository ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                self.status_var.set("‡∏™‡∏£‡πâ‡∏≤‡∏á Repository ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏™‡∏£‡πâ‡∏≤‡∏á Repository ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            else:
                self.status_var.set("‡∏™‡∏£‡πâ‡∏≤‡∏á Repository ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            
        threading.Thread(target=create_thread, daemon=True).start()
    
    def open_github(self):
        """‡πÄ‡∏õ‡∏¥‡∏î GitHub repository"""
        if self.repo_owner.get() and self.repo_name.get():
            url = f"https://github.com/{self.repo_owner.get()}/{self.repo_name.get()}"
            webbrowser.open(url)
            self.log(f"üåê Opened: {url}")
        else:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡∏∞ Repository")
        
    def log(self, message):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert('end', f"[{timestamp}] {message}\n")
        self.log_text.see('end')
        self.root.update()
        
    def run_command(self, command, cwd=None, check_error=True):
        """‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        if cwd is None:
            cwd = self.project_path.get()
            
        self.log(f"‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {command}")
        
        try:
            result = subprocess.run(command, shell=True, cwd=cwd, 
                                  capture_output=True, text=True, 
                                  check=check_error, encoding='utf-8')
            if result.stdout.strip():
                self.log(f"‚úÖ {result.stdout.strip()}")
            if result.stderr.strip() and not check_error:
                self.log(f"‚ö†Ô∏è {result.stderr.strip()}")
            return result
        except subprocess.CalledProcessError as e:
            self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            if e.stderr:
                self.log(f"‚ùå {e.stderr.strip()}")
            return None
        except Exception as e:
            self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return None
            
    def browse_folder(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        folder = filedialog.askdirectory(initialdir=self.project_path.get())
        if folder:
            self.project_path.set(folder)
            self.load_repo_info()
            
    def load_repo_info(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repository"""
        try:
            project_dir = self.project_path.get()
            if not os.path.exists(project_dir):
                return
                
            os.chdir(project_dir)
            
            # Always use the GitHub username from environment variables
            self.repo_owner.set(self.github_username.get())
            
            # Try to get repo name from git remote
            result = subprocess.run('git remote get-url origin', shell=True, 
                                  capture_output=True, text=True)
            
            if result.returncode == 0 and result.stdout:
                url = result.stdout.strip()
                self.log(f"Found remote URL: {url}")
                
                if 'github.com' in url:
                    if url.startswith('https://'):
                        parts = url.replace('https://github.com/', '').replace('.git', '').split('/')
                    elif url.startswith('git@'):
                        parts = url.replace('git@github.com:', '').replace('.git', '').split('/')
                    
                    if len(parts) >= 2:
                        # Only set the repository name, owner comes from GITHUB_USERNAME
                        self.repo_name.set(parts[1])
                        self.log(f"üìÅ Repository: {self.github_username.get()}/{parts[1]}")
        except Exception as e:
            self.log(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repo: {e}")
            
    def show_token_help(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á token"""
        help_text = """‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á GitHub Personal Access Token:

1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà GitHub.com ‚Üí Settings ‚Üí Developer settings
2. Personal access tokens ‚Üí Tokens (classic)
3. Generate new token (classic)
4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å scopes: repo, workflow
5. Copy token ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á"""
        
        messagebox.showinfo("‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", help_text)
        webbrowser.open("https://github.com/settings/tokens")
        
    def check_git_config(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git config"""
        try:
            name_result = self.run_command('git config user.name', check_error=False)
            email_result = self.run_command('git config user.email', check_error=False)
            
            if not name_result or not name_result.stdout.strip():
                self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö git user.name")
                name = messagebox.askstring("Git Config", "‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Git:")
                if name:
                    self.run_command(f'git config user.name "{name}"')
                    self.log(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ git user.name: {name}")
                    
            if not email_result or not email_result.stdout.strip():
                self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö git user.email")
                email = messagebox.askstring("Git Config", "‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏• Git:")
                if email:
                    self.run_command(f'git config user.email "{email}"')
                    self.log(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ git user.email: {email}")
                    
        except Exception as e:
            self.log(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git config: {e}")

    def check_repository_exists(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ repository ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á"""
        if not self.github_token.get() or not self.repo_owner.get() or not self.repo_name.get():
            return False
            
        try:
            url = f"https://api.github.com/repos/{self.repo_owner.get()}/{self.repo_name.get()}"
            headers = {
                'Authorization': f'Bearer {self.github_token.get()}',
                'Accept': 'application/vnd.github.v3+json',
                'X-GitHub-Api-Version': '2022-11-28'
            }
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                self.log("‚úÖ Repository ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                return True
            elif response.status_code == 404:
                self.log("‚ùå Repository ‡πÑ‡∏°‡πà‡∏û‡∏ö")
                create = messagebox.askyesno("Repository ‡πÑ‡∏°‡πà‡∏û‡∏ö", 
                    f"Repository {self.repo_owner.get()}/{self.repo_name.get()} ‡πÑ‡∏°‡πà‡∏û‡∏ö\n"
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á repository ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
                if create:
                    return self.create_repository()
                return False
            else:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö repo: {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False

    def create_repository(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á repository ‡πÉ‡∏´‡∏°‡πà"""
        try:
            self.log("üî® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á repository...")
            
            url = "https://api.github.com/user/repos"
            headers = {
                'Authorization': f'Bearer {self.github_token.get()}',
                'Accept': 'application/vnd.github.v3+json',
                'X-GitHub-Api-Version': '2022-11-28'
            }
            
            data = {
                'name': self.repo_name.get(),
                'description': f"Repository created by Repo Manager",
                'private': False,
                'auto_init': True  # ‡∏™‡∏£‡πâ‡∏≤‡∏á README.md ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            }
            
            response = requests.post(url, headers=headers, json=data)
            
            if response.status_code == 201:
                self.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á repository ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                
                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                self.log("‚è≥ ‡∏£‡∏≠ repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...")
                import time
                time.sleep(3)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                check_url = f"https://api.github.com/repos/{self.repo_owner.get()}/{self.repo_name.get()}"
                for i in range(5):  # ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    check_response = requests.get(check_url, headers=headers)
                    if check_response.status_code == 200:
                        self.log("‚úÖ Repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
                        return True
                    time.sleep(1)
                
                self.log("‚ö†Ô∏è Repository ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏ï‡πà‡∏•‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
                return True
            else:
                self.log(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á repository ‡πÑ‡∏î‡πâ: {response.status_code}")
                self.log(f"‚ùå {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False

    def fix_remote_url(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL"""
        try:
            # ‡∏•‡∏ö remote ‡πÄ‡∏Å‡πà‡∏≤
            self.run_command('git remote remove origin', check_error=False)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° remote ‡πÉ‡∏´‡∏°‡πà
            repo_url = f"https://github.com/{self.repo_owner.get()}/{self.repo_name.get()}.git"
            self.run_command(f'git remote add origin {repo_url}')
            self.log(f"üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ remote URL ‡πÉ‡∏´‡∏°‡πà: {repo_url}")
            
        except Exception as e:
            self.log(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote: {e}")

    def push_files(self):
        """Push ‡πÑ‡∏ü‡∏•‡πå"""
        def push_thread():
            try:
                self.status_var.set("‡∏Å‡∏≥‡∏•‡∏±‡∏á push...")
                self.log("üì§ ‡πÄ‡∏£‡∏¥‡πà‡∏° push ‡πÑ‡∏ü‡∏•‡πå")
                
                project_dir = self.project_path.get()
                os.chdir(project_dir)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git config
                self.check_git_config()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö repository
                repo_created = False
                if not self.check_repository_exists():
                    self.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
                    self.status_var.set("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    return
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git repo
                if not os.path.exists('.git'):
                    self.run_command('git init')
                    self.run_command('git branch -M main')
                    repo_created = True
                    
                # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!)
                self.fix_remote_url()
                    
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                self.run_command('git add .')
                status_result = self.run_command('git status --porcelain', check_error=False)
                    
                if status_result and status_result.stdout.strip():
                    # Commit
                    commit_msg = f"Update - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    commit_result = self.run_command(f'git commit -m "{commit_msg}"', check_error=False)
                    
                    if commit_result and commit_result.returncode == 0:
                        self.log("‚úÖ Commit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else:
                        self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ commit ‡πÑ‡∏î‡πâ")
                else:
                    self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö branch ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                branch_result = self.run_command('git branch --show-current', check_error=False)
                current_branch = 'main'
                if branch_result and branch_result.stdout.strip():
                    current_branch = branch_result.stdout.strip()
                
                # Push ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á repo
                if repo_created:
                    self.log("‚è≥ ‡∏£‡∏≠ repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...")
                    import time
                    time.sleep(2)
                
                self.log(f"üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch: {current_branch}")
                push_result = self.run_command(f'git push -u origin {current_branch}', check_error=False)
                
                if push_result and push_result.returncode == 0:
                    self.log("‚úÖ Push ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                    self.status_var.set("Push ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                else:
                    # ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ force push
                    self.log("‚ö†Ô∏è ‡∏•‡∏≠‡∏á force push...")
                    force_result = self.run_command(f'git push -f origin {current_branch}', check_error=False)
                    if force_result and force_result.returncode == 0:
                        self.log("‚úÖ Force push ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                        self.status_var.set("Push ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                    else:
                        self.log("‚ùå Push ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                        self.status_var.set("Push ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                
            except Exception as e:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                self.status_var.set("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
                
        threading.Thread(target=push_thread, daemon=True).start()
        
    def create_release(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á release"""
        if not self.github_token.get():
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà GitHub Token")
            return
            
        if not self.repo_owner.get() or not self.repo_name.get():
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡∏∞ Repository")
            return
            
        self.show_quick_release_dialog()
    


    def show_quick_release_dialog(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö quick release"""
        dialog = tk.Toplevel(self.root)
        dialog.title("‡∏™‡∏£‡πâ‡∏≤‡∏á Release")
        dialog.geometry("580x480")  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏á
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.configure(bg=self.colors['surface'])
        
        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 20))
        
        # Get version info
        latest_tag = self.get_latest_tag()
        all_tags = self.get_all_tags()
        suggested_version = self.increment_version(latest_tag)
        
        # Header - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        header_frame = tk.Frame(dialog, bg=self.colors['surface'])
        header_frame.pack(fill='x', padx=15, pady=15)
        
        tk.Label(header_frame, text="üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á GitHub Release", 
                font=('Segoe UI', 16, 'bold'), fg=self.colors['text'],
                bg=self.colors['surface']).pack()
        
        tk.Label(header_frame, text=f"‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {latest_tag or '‡πÑ‡∏°‡πà‡∏°‡∏µ'}", 
                font=('Segoe UI', 10), fg=self.colors['text_muted'],
                bg=self.colors['surface']).pack(pady=(3, 0))
        
        # Credit - ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        tk.Label(header_frame, text="üë®‚Äçüíª ZirconX", 
                font=('Segoe UI', 8), fg=self.colors['text_muted'],
                bg=self.colors['surface']).pack(pady=(1, 0))
        
        # Content - ‡∏õ‡∏£‡∏±‡∏ö padding ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        content_frame = tk.Frame(dialog, bg=self.colors['surface'])
        content_frame.pack(fill='both', expand=True, padx=15, pady=8)
        
        # Show existing tags - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î
        if all_tags:
            tk.Label(content_frame, text="üìã ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ:", 
                    font=('Segoe UI', 9, 'bold'), fg=self.colors['text'],
                    bg=self.colors['surface']).pack(anchor='w', pady=(0, 3))
            
            tags_text = ", ".join(all_tags[:6])  # Show first 6 tags
            if len(all_tags) > 6:
                tags_text += f" ... (‡∏≠‡∏µ‡∏Å {len(all_tags)-6} ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô)"
            
            tk.Label(content_frame, text=tags_text, 
                    font=('Segoe UI', 8), fg=self.colors['text_muted'],
                    bg=self.colors['surface'], wraplength=380, justify='left').pack(anchor='w', pady=(0, 10))
        
        # Version selection
        tk.Label(content_frame, text="üè∑Ô∏è ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà:", 
                font=('Segoe UI', 10, 'bold'), fg=self.colors['text'],
                bg=self.colors['surface']).pack(anchor='w', pady=(0, 5))
        
        version_frame = tk.Frame(content_frame, bg=self.colors['surface'])
        version_frame.pack(fill='x', pady=(0, 10))
        
        version_var = tk.StringVar(value=suggested_version)
        version_entry = tk.Entry(version_frame, textvariable=version_var, 
                                font=('Segoe UI', 12), bg=self.colors['bg'], 
                                fg=self.colors['text'], insertbackground=self.colors['text'],
                                relief='solid', bd=1, width=15)
        version_entry.pack(side='left', padx=(0, 15))
        
        # Simplified version increment - only one button
        def next_version():
            current = version_var.get()
            new_ver = self.increment_version_type(current, 'patch')
            version_var.set(new_ver)
        
        next_btn = tk.Button(version_frame, text="‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", command=next_version,
                            font=('Segoe UI', 10), bg=self.colors['primary'], fg='white',
                            relief='flat', cursor='hand2', width=12)
        next_btn.pack(side='left')
        
        # Release Notes - Editable - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î
        tk.Label(content_frame, text="üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Release:", 
                font=('Segoe UI', 10, 'bold'), fg=self.colors['text'],
                bg=self.colors['surface']).pack(anchor='w', pady=(12, 4))
        
        changelog = self.generate_changelog(latest_tag)
        notes_text = tk.Text(content_frame, height=10, width=65,
                            bg=self.colors['bg'], fg=self.colors['text'],
                            font=('Segoe UI', 9), relief='solid', bd=1,
                            insertbackground=self.colors['text'], wrap='word')
        notes_text.pack(anchor='w', pady=(0, 12), fill='both', expand=True)
        
        notes_text.insert('1.0', changelog)
        
        # Buttons - ‡∏õ‡∏£‡∏±‡∏ö padding
        btn_frame = tk.Frame(dialog, bg=self.colors['surface'])
        btn_frame.pack(fill='x', padx=15, pady=(0, 15))
        
        def create_quick_release():
            new_version = version_var.get().strip()
            if not new_version:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô")
                return
            
            if new_version in all_tags:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô {new_version} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!")
                return
            
            # Get edited release notes
            release_notes = notes_text.get('1.0', 'end-1c').strip()
            if not release_notes:
                release_notes = f"Release {new_version}"
            
            dialog.destroy()
            self.do_quick_release(new_version, release_notes)
        
        # Center the buttons
        btn_container = tk.Frame(btn_frame, bg=self.colors['surface'])
        btn_container.pack(expand=True)
        
        ok_btn = tk.Button(btn_container, text="‚úÖ ‡∏ï‡∏Å‡∏•‡∏á", 
                          command=create_quick_release,
                          font=('Segoe UI', 11, 'bold'), bg=self.colors['primary'], 
                          fg='white', relief='flat', cursor='hand2', width=14, height=2)
        ok_btn.pack(side='left', padx=(0, 12))
        
        cancel_btn = tk.Button(btn_container, text="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", command=dialog.destroy,
                              font=('Segoe UI', 10), bg=self.colors['secondary'], 
                              fg='white', relief='flat', cursor='hand2', width=10, height=2)
        cancel_btn.pack(side='left')
        
        # Make OK button the default (Enter key)
        ok_btn.focus_set()
        dialog.bind('<Return>', lambda e: create_quick_release())
    
    def get_all_tags(self):
        """‡∏î‡∏∂‡∏á tags ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            result = subprocess.run('git tag --sort=-version:refname', shell=True, 
                                  cwd=self.project_path.get(), capture_output=True, text=True)
            if result.returncode == 0 and result.stdout.strip():
                return result.stdout.strip().split('\n')
        except:
            pass
        return []
    
    def increment_version_type(self, version, version_type):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"""
        if not version:
            return "v1.0.0"
        
        clean_version = version.lstrip('v')
        parts = clean_version.split('.')
        
        try:
            if len(parts) >= 3:
                major, minor, patch = int(parts[0]), int(parts[1]), int(parts[2])
                
                if version_type == 'major':
                    return f"v{major + 1}.0.0"
                elif version_type == 'minor':
                    return f"v{major}.{minor + 1}.0"
                elif version_type == 'patch':
                    return f"v{major}.{minor}.{patch + 1}"
        except:
            pass
        
        return f"v{clean_version}.1"
    
    def do_quick_release(self, version, changelog):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á quick release"""
        def quick_release_thread():
            try:
                self.status_var.set("Creating quick release...")
                self.log("‚ö° Starting quick release creation...")
                self.log(f"üìã Version: {version}")
                
                # Create release
                success = self.create_release_sync(version, version, changelog)
                
                if success:
                    self.log("üéâ Quick release created successfully!")
                    self.status_var.set("Release created")
                    messagebox.showinfo("Success", f"Release {version} created successfully!")
                else:
                    self.log("‚ùå Failed to create release")
                    self.status_var.set("Release failed")
                    
            except Exception as e:
                self.log(f"‚ùå Error: {e}")
                self.status_var.set("Error")
                messagebox.showerror("Error", f"Failed to create release: {e}")
        
        threading.Thread(target=quick_release_thread, daemon=True).start()
        
    def show_release_dialog(self, parent_dialog=None):
        """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡πÅ‡∏ö‡∏ö custom"""
        if parent_dialog:
            parent_dialog.destroy()
            
        dialog = tk.Toplevel(self.root)
        dialog.title("Custom Release")
        dialog.geometry("520x420")  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏á
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.configure(bg=self.colors['surface'])
        
        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 60, self.root.winfo_rooty() + 25))
        
        # Get latest tag
        latest_tag = self.get_latest_tag()
        suggested_version = self.increment_version(latest_tag)
        
        # Header
        header_frame = tk.Frame(dialog, bg=self.colors['surface'])
        header_frame.pack(fill='x', padx=20, pady=20)
        
        tk.Label(header_frame, text="üõ†Ô∏è Custom GitHub Release", 
                font=('Segoe UI', 16, 'bold'), fg=self.colors['text'],
                bg=self.colors['surface']).pack()
        
        tk.Label(header_frame, text=f"Latest tag: {latest_tag or 'None'}", 
                font=('Segoe UI', 10), fg=self.colors['text_muted'],
                bg=self.colors['surface']).pack(pady=(5, 0))
        
        # Content frame
        content_frame = tk.Frame(dialog, bg=self.colors['surface'])
        content_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Version
        tk.Label(content_frame, text="üè∑Ô∏è Version:", font=('Segoe UI', 10, 'bold'),
                fg=self.colors['text'], bg=self.colors['surface']).pack(anchor='w', pady=(0,5))
        
        version_var = tk.StringVar(value=suggested_version)
        version_entry = tk.Entry(content_frame, textvariable=version_var, 
                                font=('Segoe UI', 10), bg=self.colors['bg'], 
                                fg=self.colors['text'], insertbackground=self.colors['text'],
                                relief='solid', bd=1, width=40)
        version_entry.pack(anchor='w', pady=(0,15))
        
        # Name
        tk.Label(content_frame, text="üìù Release Name:", font=('Segoe UI', 10, 'bold'),
                fg=self.colors['text'], bg=self.colors['surface']).pack(anchor='w', pady=(0,5))
        
        name_var = tk.StringVar(value=suggested_version)
        name_entry = tk.Entry(content_frame, textvariable=name_var, 
                             font=('Segoe UI', 10), bg=self.colors['bg'], 
                             fg=self.colors['text'], insertbackground=self.colors['text'],
                             relief='solid', bd=1, width=40)
        name_entry.pack(anchor='w', pady=(0,15))
        
        # Description
        tk.Label(content_frame, text="üìã Release Notes:", font=('Segoe UI', 10, 'bold'),
                fg=self.colors['text'], bg=self.colors['surface']).pack(anchor='w', pady=(0,5))
        
        desc_text = tk.Text(content_frame, width=60, height=10, 
                           bg=self.colors['bg'], fg=self.colors['text'], 
                           font=('Segoe UI', 9), relief='solid', bd=1,
                           insertbackground=self.colors['text'])
        desc_text.pack(anchor='w', pady=(0,15))
        
        # Auto changelog
        changelog = self.generate_changelog(latest_tag)
        desc_text.insert('1.0', changelog)
        
        # Buttons
        btn_frame = tk.Frame(dialog, bg=self.colors['surface'])
        btn_frame.pack(fill='x', padx=20, pady=(0,20))
        
        def create_action():
            self.do_create_release(version_var.get(), name_var.get(), desc_text.get('1.0', 'end'))
            dialog.destroy()
            
        create_btn = tk.Button(btn_frame, text="üöÄ Create Release", command=create_action, 
                              font=('Segoe UI', 10, 'bold'), bg=self.colors['primary'], 
                              fg='white', relief='flat', cursor='hand2', width=15)
        create_btn.pack(side='left', padx=(0,10))
        
        cancel_btn = tk.Button(btn_frame, text="Cancel", command=dialog.destroy, 
                              font=('Segoe UI', 10), bg=self.colors['secondary'], 
                              fg='white', relief='flat', cursor='hand2', width=10)
        cancel_btn.pack(side='left')
                 
    def get_latest_tag(self):
        """‡∏î‡∏∂‡∏á tag ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        try:
            result = subprocess.run('git tag --sort=-version:refname', shell=True, 
                                  cwd=self.project_path.get(), capture_output=True, text=True)
            if result.returncode == 0 and result.stdout.strip():
                return result.stdout.strip().split('\n')[0]
        except:
            pass
        return None
        
    def increment_version(self, version):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô"""
        if not version:
            return "v1.0.0"
            
        clean_version = version.lstrip('v')
        parts = clean_version.split('.')
        
        try:
            if len(parts) >= 3:
                parts[2] = str(int(parts[2]) + 1)
                return f"v{'.'.join(parts)}"
        except:
            pass
            
        return f"v{clean_version}.1"
        
    def generate_changelog(self, latest_tag):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á changelog"""
        if not latest_tag:
            return "Release notes"
            
        try:
            result = subprocess.run(f'git log {latest_tag}..HEAD --oneline', shell=True, 
                                  cwd=self.project_path.get(), capture_output=True, text=True)
            if result.returncode == 0 and result.stdout.strip():
                changelog = "## ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á\n\n"
                for commit in result.stdout.strip().split('\n'):
                    if commit.strip():
                        changelog += f"- {commit}\n"
                return changelog
        except:
            pass
            
        return "Release notes"
        
    def do_create_release(self, version, name, description):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡∏à‡∏£‡∏¥‡∏á"""
        def release_thread():
            try:
                self.status_var.set("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á release...")
                self.log(f"üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á release {version}")
                
                url = f"https://api.github.com/repos/{self.repo_owner.get()}/{self.repo_name.get()}/releases"
                headers = {
                    'Authorization': f'Bearer {self.github_token.get()}',
                    'Accept': 'application/vnd.github.v3+json',
                    'X-GitHub-Api-Version': '2022-11-28'
                }
                
                data = {
                    'tag_name': version,
                    'name': name,
                    'body': description.strip(),
                    'draft': False,
                    'prerelease': False
                }
                
                response = requests.post(url, headers=headers, json=data)
                
                if response.status_code == 201:
                    release_data = response.json()
                    self.log(f"üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á release {version} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    self.log(f"üîó URL: {release_data['html_url']}")
                    self.status_var.set("‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏™‡∏£‡πâ‡∏≤‡∏á release {version} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                else:
                    self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.status_code}")
                    self.log(f"‚ùå {response.text}")
                    messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡πÑ‡∏î‡πâ")
                    
            except Exception as e:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
            self.status_var.set("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            
        threading.Thread(target=release_thread, daemon=True).start()
        
    def do_all(self):
        """‡∏ó‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        if not self.repo_owner.get() or not self.repo_name.get():
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡∏∞ Repository")
            return
        
        if not self.github_token.get():
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà GitHub Token")
            return
        
        self.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô")
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: Push ‡πÑ‡∏ü‡∏•‡πå
        self.do_push_step()
    
    def do_push_step(self):
        """‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: Push ‡πÑ‡∏ü‡∏•‡πå"""
        def push_thread():
            try:
                self.status_var.set("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 1/2: ‡∏Å‡∏≥‡∏•‡∏±‡∏á push ‡πÑ‡∏ü‡∏•‡πå...")
                self.log("üì§ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏£‡∏¥‡πà‡∏° push ‡πÑ‡∏ü‡∏•‡πå")
                
                project_dir = self.project_path.get()
                os.chdir(project_dir)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö git config
                self.check_git_config()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö repository
                if not self.check_repository_exists():
                    self.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
                    self.status_var.set("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    return
                
                if not os.path.exists('.git'):
                    self.run_command('git init')
                    self.run_command('git branch -M main')
                    
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                self.run_command('git add .')
                status_result = self.run_command('git status --porcelain', check_error=False)
                
                if status_result and status_result.stdout.strip():
                    commit_msg = f"Release prep - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    commit_result = self.run_command(f'git commit -m "{commit_msg}"', check_error=False)
                else:
                    self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà")
                
                # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL
                self.fix_remote_url()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö branch
                branch_result = self.run_command('git branch --show-current', check_error=False)
                current_branch = 'main'
                if branch_result and branch_result.stdout.strip():
                    current_branch = branch_result.stdout.strip()
                
                # Push
                push_result = self.run_command(f'git push -u origin {current_branch}', check_error=False)
                
                if push_result and push_result.returncode == 0:
                    self.log("‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: Push ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    self.status_var.set("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 1/2 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                    
                    # ‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á release
                    self.root.after(1000, self.do_release_step)  # ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                else:
                    self.log("‚ùå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Push ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    self.status_var.set("Push ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                
            except Exception as e:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: {e}")
                self.status_var.set("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
                
        threading.Thread(target=push_thread, daemon=True).start()
    
    def do_release_step(self):
        """‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Release"""
        self.log("üéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Release")
        self.status_var.set("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 2/2: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Release...")
        
        # ‡πÄ‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
        self.show_quick_release_dialog_for_do_all()
    
    def show_quick_release_dialog_for_do_all(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ó‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        dialog = tk.Toplevel(self.root)
        dialog.title("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Release")
        dialog.geometry("600x500")  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏á
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.configure(bg=self.colors['surface'])
        
        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 60, self.root.winfo_rooty() + 25))
        
        # Get version info
        latest_tag = self.get_latest_tag()
        all_tags = self.get_all_tags()
        suggested_version = self.increment_version(latest_tag)
        
        # Header - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        header_frame = tk.Frame(dialog, bg=self.colors['surface'])
        header_frame.pack(fill='x', padx=15, pady=15)
        
        tk.Label(header_frame, text="üéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Release", 
                font=('Segoe UI', 16, 'bold'), fg=self.colors['text'],
                bg=self.colors['surface']).pack()
        
        tk.Label(header_frame, text=f"‚úÖ Push ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß | ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {latest_tag or '‡πÑ‡∏°‡πà‡∏°‡∏µ'}", 
                font=('Segoe UI', 10), fg=self.colors['text_muted'],
                bg=self.colors['surface']).pack(pady=(5, 0))
        
        # Content - ‡∏õ‡∏£‡∏±‡∏ö padding ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        content_frame = tk.Frame(dialog, bg=self.colors['surface'])
        content_frame.pack(fill='both', expand=True, padx=15, pady=8)
        
        # Show existing tags - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î
        if all_tags:
            tk.Label(content_frame, text="üìã ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ:", 
                    font=('Segoe UI', 9, 'bold'), fg=self.colors['text'],
                    bg=self.colors['surface']).pack(anchor='w', pady=(0, 3))
            
            tags_text = ", ".join(all_tags[:6])  # Show first 6 tags
            if len(all_tags) > 6:
                tags_text += f" ... (‡∏≠‡∏µ‡∏Å {len(all_tags)-6} ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô)"
            
            tk.Label(content_frame, text=tags_text, 
                    font=('Segoe UI', 8), fg=self.colors['text_muted'],
                    bg=self.colors['surface'], wraplength=520, justify='left').pack(anchor='w', pady=(0, 12))
        
        # Version selection - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î
        tk.Label(content_frame, text="üè∑Ô∏è ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà:", 
                font=('Segoe UI', 10, 'bold'), fg=self.colors['text'],
                bg=self.colors['surface']).pack(anchor='w', pady=(0, 5))
        
        version_frame = tk.Frame(content_frame, bg=self.colors['surface'])
        version_frame.pack(fill='x', pady=(0, 12))
        
        version_var = tk.StringVar(value=suggested_version)
        version_entry = tk.Entry(version_frame, textvariable=version_var, 
                                font=('Segoe UI', 12), bg=self.colors['bg'], 
                                fg=self.colors['text'], insertbackground=self.colors['text'],
                                relief='solid', bd=1, width=15)
        version_entry.pack(side='left', padx=(0, 15))
        
        # Next version button
        def next_version():
            current = version_var.get()
            new_ver = self.increment_version_type(current, 'patch')
            version_var.set(new_ver)
        
        next_btn = tk.Button(version_frame, text="‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", command=next_version,
                            font=('Segoe UI', 10), bg=self.colors['primary'], fg='white',
                            relief='flat', cursor='hand2', width=12)
        next_btn.pack(side='left')
        
        # Release notes - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î
        tk.Label(content_frame, text="üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Release:", 
                font=('Segoe UI', 10, 'bold'), fg=self.colors['text'],
                bg=self.colors['surface']).pack(anchor='w', pady=(0, 4))
        
        changelog = self.generate_changelog(latest_tag)
        notes_text = tk.Text(content_frame, height=10, width=70,
                            bg=self.colors['bg'], fg=self.colors['text'],
                            font=('Segoe UI', 9), relief='solid', bd=1,
                            insertbackground=self.colors['text'], wrap='word')
        notes_text.pack(anchor='w', pady=(0, 12), fill='both', expand=True)
        
        notes_text.insert('1.0', changelog)
        
        # Buttons - ‡∏õ‡∏£‡∏±‡∏ö padding
        btn_frame = tk.Frame(dialog, bg=self.colors['surface'])
        btn_frame.pack(fill='x', padx=15, pady=(0, 15))
        
        def create_final_release():
            new_version = version_var.get().strip()
            if not new_version:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô")
                return
            
            if new_version in all_tags:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô {new_version} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!")
                return
            
            # Get edited release notes
            release_notes = notes_text.get('1.0', 'end-1c').strip()
            if not release_notes:
                release_notes = f"Release {new_version}"
            
            dialog.destroy()
            self.do_final_release(new_version, release_notes)
        

        # Center the buttons - simplified to 2 main buttons
        btn_container = tk.Frame(btn_frame, bg=self.colors['surface'])
        btn_container.pack(expand=True)
        
        # Main OK button (most prominent)
        ok_btn = tk.Button(btn_container, text="‚úÖ ‡∏ï‡∏Å‡∏•‡∏á", 
                          command=create_final_release,
                          font=('Segoe UI', 11, 'bold'), bg=self.colors['primary'], 
                          fg='white', relief='flat', cursor='hand2', width=14, height=2)
        ok_btn.pack(side='left', padx=(0, 12))
        
        # Cancel button
        cancel_btn = tk.Button(btn_container, text="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", command=dialog.destroy,
                              font=('Segoe UI', 10), bg=self.colors['secondary'], 
                              fg='white', relief='flat', cursor='hand2', width=10, height=2)
        cancel_btn.pack(side='left')
        
        # Make OK button the default (Enter key)
        ok_btn.focus_set()
        dialog.bind('<Return>', lambda e: create_final_release())
        dialog.bind('<Escape>', lambda e: dialog.destroy())
    
    def do_final_release(self, version, release_notes):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"""
        def final_release_thread():
            try:
                self.status_var.set("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Release...")
                self.log(f"üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á release {version}")
                
                # Create release
                success = self.create_release_sync(version, version, release_notes)
                
                if success:
                    self.log("üéâ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏™‡∏£‡πâ‡∏≤‡∏á Release ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    self.log("‚ú® ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î! Push ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Release ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    self.status_var.set("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                    messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!\n‚úÖ Push ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Release {version} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    self.log("‚ùå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡∏™‡∏£‡πâ‡∏≤‡∏á Release ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    self.status_var.set("‡∏™‡∏£‡πâ‡∏≤‡∏á Release ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    
            except Exception as e:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: {e}")
                self.status_var.set("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
        
        threading.Thread(target=final_release_thread, daemon=True).start()

    def create_release_sync(self, version, name, description):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡πÅ‡∏ö‡∏ö sync"""
        try:
            self.status_var.set("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á release...")
            self.log(f"üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á release {version}")
            
            url = f"https://api.github.com/repos/{self.repo_owner.get()}/{self.repo_name.get()}/releases"
            headers = {
                'Authorization': f'Bearer {self.github_token.get()}',
                'Accept': 'application/vnd.github.v3+json',
                'X-GitHub-Api-Version': '2022-11-28'
            }
            
            data = {
                'tag_name': version,
                'name': name,
                'body': description.strip(),
                'draft': False,
                'prerelease': False
            }
            
            response = requests.post(url, headers=headers, json=data)
            
            if response.status_code == 201:
                release_data = response.json()
                self.log(f"üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á release {version} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                self.log(f"üîó URL: {release_data['html_url']}")
                return True
            else:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.status_code}")
                self.log(f"‚ùå {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False
        
    def refresh_info(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä"""
        self.load_repo_info()
        self.log("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
    def view_releases(self):
        """‡∏î‡∏π releases"""
        if self.repo_owner.get() and self.repo_name.get():
            url = f"https://github.com/{self.repo_owner.get()}/{self.repo_name.get()}/releases"
            webbrowser.open(url)
            self.log(f"üåê ‡πÄ‡∏õ‡∏¥‡∏î: {url}")
        else:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Owner ‡πÅ‡∏•‡∏∞ Repository")

    def check_setup(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        def check_thread():
            self.log("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤...")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
            if not os.path.exists(self.project_path.get()):
                self.log("‚ùå ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏°‡πà‡∏û‡∏ö")
                return
            else:
                self.log("‚úÖ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Git
            git_result = self.run_command('git --version', check_error=False)
            if git_result and git_result.returncode == 0:
                self.log("‚úÖ Git ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            else:
                self.log("‚ùå Git ‡πÑ‡∏°‡πà‡∏û‡∏ö")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Git config
            self.check_git_config()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GitHub Token
            if not self.github_token.get():
                self.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö GitHub Token")
            else:
                self.log("‚úÖ GitHub Token ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Token
                try:
                    headers = {
                        'Authorization': f'Bearer {self.github_token.get()}',
                        'Accept': 'application/vnd.github.v3+json',
                        'X-GitHub-Api-Version': '2022-11-28'
                    }
                    response = requests.get('https://api.github.com/user', headers=headers)
                    if response.status_code == 200:
                        user_data = response.json()
                        self.log(f"‚úÖ Token ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user_data.get('login', 'Unknown')}")
                    else:
                        self.log(f"‚ùå Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {response.status_code}")
                except Exception as e:
                    self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö token: {e}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Repository
            if self.repo_owner.get() and self.repo_name.get():
                self.log(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö repository: {self.repo_owner.get()}/{self.repo_name.get()}")
                if self.check_repository_exists():
                    self.log("‚úÖ Repository ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                else:
                    self.log("‚ùå Repository ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            else:
                self.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ Owner ‡∏´‡∏£‡∏∑‡∏≠ Repository")
            
            self.log("üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
        threading.Thread(target=check_thread, daemon=True).start()

    def fix_remote_manual(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL ‡πÅ‡∏ö‡∏ö manual"""
        def fix_thread():
            try:
                project_dir = self.project_path.get()
                os.chdir(project_dir)
                
                if not os.path.exists('.git'):
                    self.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Git repository")
                    return
                
                if not self.repo_owner.get() or not self.repo_name.get():
                    self.log("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Owner ‡πÅ‡∏•‡∏∞ Repository")
                    return
                
                self.log("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL...")
                self.fix_remote_url()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö remote ‡πÉ‡∏´‡∏°‡πà
                result = self.run_command('git remote -v', check_error=False)
                if result:
                    self.log("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç remote URL ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                
            except Exception as e:
                self.log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
        threading.Thread(target=fix_thread, daemon=True).start()
            
    def run(self):
        """‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        self.log("üöÄ Repository & Release Manager ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.log("üí° ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà GitHub Token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.log("üë®‚Äçüíª ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ ZirconX - ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        self.log("üìÑ MIT License - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏¥‡∏™‡∏£‡∏∞")
        self.root.mainloop()

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        app = RepoManagerGUI()
        app.run()
    except KeyboardInterrupt:
        print("\n‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    except Exception as e:
        print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å...")

if __name__ == "__main__":
    main()